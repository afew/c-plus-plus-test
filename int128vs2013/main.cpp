



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "int128.h"

#include <string.h>

typedef int128::u64  u64;
typedef int128::s64  s64;
typedef int128::u32  u32;
typedef int128::s32  s32;
typedef int128::u16  u16;

int mul(int a, int b)
{
	unsigned short s0[2]{};
	unsigned short s1[2]{};
	memcpy(s0, &a, sizeof(int));
	memcpy(s1, &b, sizeof(int));


/* a                   s0[1]          s0[0]
   b                   s1[1]          s1[0]
--------------------------------------------
               s0[1] * s1[0]  s0[0] * s1[0]
 s0[1]* s1[1]  s0[0] * s1[1]
--------------------------------------------

s64 t0 = s0[0] * s1[0];
s64 t1 = (s0[1] * s1[0] + s0[0] * s1[1]) << 16;
s64 t2 = (s0[1]* s1[1]) << 32;
*/

	int t0 = int(s0[0] * s1[0]);
	int t1 = int(s0[1]) * int(s1[0]) + int(s0[0]) * int(s1[1]);
	t1 <<= 32;

	s64 ret = t1 + t0;
	return (int)ret;
}

s64 mul(s64 a, s64 b)
{
	u16 s0[4]{};
	u16 s1[4]{};
	memcpy(s0, &a, sizeof(s64));
	memcpy(s1, &b, sizeof(s64));

/* a                                             s0[3]        s0[2]        s0[1]        s0[0]
   b                                             s1[3]        s1[2]        s1[1]        s1[0]
---------------------------------------------------------------------------------------------
                                           s0[3]*s1[0]  s0[2]*s1[0]  s0[1]*s1[0]  s0[0]*s1[0]
                              s0[3]*s1[1]  s0[2]*s1[1]  s0[1]*s1[1]  s0[0]*s1[1]
                 s0[3]*s1[2]  s0[2]*s1[2]  s0[1]*s1[2]  s0[0]*s1[2]
    s0[3]*s1[3]  s0[2]*s1[3]  s0[1]*s1[3]  s0[0]*s1[3]
---------------------------------------------------------------------------------------------
*/

	u64 t0 =                                                                         u64(s0[0])*u64(s1[0]);
	u64 t1 =                                                 u64(s0[1])*u64(s1[0]) + u64(s0[0])*u64(s1[1]);
	u64 t2 =                         u64(s0[2])*u64(s1[0]) + u64(s0[1])*u64(s1[1]) + u64(s0[0])*u64(s1[2]);
	u64 t3 = u64(s0[3])*u64(s1[0]) + u64(s0[2])*u64(s1[1]) + u64(s0[1])*u64(s1[2]) + u64(s0[0])*u64(s1[3]);
	u64 t4 = u64(s0[3])*u64(s1[1]) + u64(s0[2])*u64(s1[2]) + u64(s0[1])*u64(s1[3]);
	u64 t5 = u64(s0[3])*u64(s1[2]) + u64(s0[2])*u64(s1[3]);
	u64 t6 = u64(s0[3])*u64(s1[3]);

	t1 <<= 16;
	t2 <<= 32;
	t3 <<= 48;
	t4 <<= 64;
	t5 <<= 70;

	s64 ret = t0 + t1 + t2 + t3 +t4 + t5;
	return (s64 )ret;
}


int128 mul128(const int128& a, const int128& b)
{
	u16 s0[8]{};
	u16 s1[8]{};
	memcpy(s0, &a, sizeof(int128));
	memcpy(s1, &b, sizeof(int128));

/* a                                                                                             s0[7]        s0[6]        s0[5]        s0[4]        s0[3]        s0[2]        s0[1]        s0[0]
   b                                                                                             s1[7]        s1[6]        s1[5]        s1[4]        s1[3]        s1[2]        s1[1]        s1[0]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                           s0[7]*s1[0]  s0[6]*s1[0]  s0[5]*s1[0]  s0[4]*s1[0]  s0[3]*s1[0]  s0[2]*s1[0]  s0[1]*s1[0]  s0[0]*s1[0]
                                                                              s0[7]*s1[1]  s0[6]*s1[1]  s0[5]*s1[1]  s0[4]*s1[1]  s0[3]*s1[1]  s0[2]*s1[1]  s0[1]*s1[1]  s0[0]*s1[1]
                                                                 s0[7]*s1[2]  s0[6]*s1[2]  s0[5]*s1[2]  s0[4]*s1[2]  s0[3]*s1[2]  s0[2]*s1[2]  s0[1]*s1[2]  s0[0]*s1[2]
                                                    s0[7]*s1[3]  s0[6]*s1[3]  s0[5]*s1[3]  s0[4]*s1[3]  s0[3]*s1[3]  s0[2]*s1[3]  s0[1]*s1[3]  s0[0]*s1[3]
                                       s0[7]*s1[4]  s0[6]*s1[4]  s0[5]*s1[4]  s0[4]*s1[4]  s0[3]*s1[4]  s0[2]*s1[4]  s0[1]*s1[4]  s0[0]*s1[4]
                          s0[7]*s1[5]  s0[6]*s1[5]  s0[5]*s1[5]  s0[4]*s1[5]  s0[3]*s1[5]  s0[2]*s1[5]  s0[1]*s1[5]  s0[0]*s1[5]
             s0[7]*s1[6]  s0[6]*s1[6]  s0[5]*s1[6]  s0[4]*s1[6]  s0[3]*s1[6]  s0[2]*s1[6]  s0[1]*s1[6]  s0[0]*s1[6]
s0[7]*s1[7]  s0[6]*s1[7]  s0[5]*s1[7]  s0[4]*s1[7]  s0[3]*s1[7]  s0[2]*s1[7]  s0[1]*s1[7]  s0[0]*s1[7]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/

	u64 s[16]{};

	for(int k=0; k<=7; ++k)
	{
		int idx=k;
		for(int j=k, i=0; i<=k; ++i, --j)
		{
			s[idx] += u64(s0[j])*u64(s1[i]);
		}
	}

	for(int k=8; k<=14; ++k)
	{
		int idx=k;
		for(int j=7, i=k-7; i<=7; ++i, --j)
		{
			s[idx] += u64(s0[j])*u64(s1[i]);
		}
	}

	int128 i128[16]{};

	for(int i=0; i<=14; ++i)
	{
		i128[i] = s[i];
		i128[i].l_shift (16*i);
	}


	//t1 <<= 16;
	//t2 <<= 32;
	//t3 <<= 48;
	//t4 <<= 64;
	//t5 <<= 70;

	int128 ret{};

	for(int i=0; i<=14; ++i)
	{
		ret += i128[i];
	}

	return (s64 )ret;
}

#include <xmmintrin.h> 
int main128tst(int, char**)
{
	s64 a = 9999999999999999999ll;
	s64 b = 9999999999999999999ll;
	s64 c = a * b;
	s64 e = mul128(a, b);

	c=0;
	return 0;
}


int mainxx(int, char**)
{
	int t = 0x80000000;

	t>>=16;

	int128 a(100);
	int128 b(-200);
	int128 add = a.add(b);
	int128 sub = a.sub(b);

	int k = sub;

	int r = a< k;


	add = int128{(u64)0x9abcdef012345678ll, (s64)0x01234567ll};
	add.l_shift(32);

	add = int128{(u64)0xabcdef01234567ll, (s64)0x9abcdef012345678ll};
	add.r_shift(72);

	s64 i8=-3;
	i8 <<= 16;
	return 0;
}

#include <vector>
typedef std::vector<int> ls_int;

ls_int gen(int size)
{
	ls_int ret;
	ret.resize(size);
	return ret;
}

void main()
{
	ls_int cc = gen(10);
	int size = cc.size();
	size = 0;
}

